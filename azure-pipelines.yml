pr:
  branches:
    include:
      - '*'
trigger:
  branches:
    include:
      - main
      - release/*

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: solution
  value: '**/*.sln'
- name: project
  value: '**/BasicTemplate.Api/*.csproj'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
  #artifactName: Build_$(Build.BuildNumber)
- name: SecretKeys.A
  value: '$(SecretKeys-A)'

stages:
- stage: build
  displayName: 'Build & Test'
  jobs:
    - job: build
      displayName: 'Build job'
      steps:
      - script: pwd && ls -la && cat **/BasicTemplate.Api/appsettings.json
      
      - task: FileTransform@2
        displayName: 'Run file transform task'
        inputs:
          folderPath: '**/BasicTemplate.Api/appsettings.json'
          jsonTargetFiles: 'appsettings.json'
          
      - task: UseDotNet@2
        displayName: 'Install .NET 7 SDK'
        inputs:
          version: '7.x'
          packageType: sdk
          performMultiLevelLookup: true
          includePreviewVersions: true

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet build'
        inputs:
          command: build
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet test'
        inputs:
          command: test 
          projects: '$(solution)'
          arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'
          publishTestResults: true

      - script: dotnet tool install --global dotnet-reportgenerator-globaltool
        displayName: 'Install ReportGenerator'      

      # "reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml" helps us combine multiple coverage.corbetura.xml files
      - script: 'reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"'
        displayName: 'Run ReportGenerator'
             
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'

      # - script: dotnet publish $(solution) -o $(Build.ArtifactStagingDirectory)
      #   displayName: 'Run dotnet publish'

      - task: DotNetCoreCLI@2
        displayName: 'Run dotnet publish'
        inputs:
          command: publish
          projects: $(project)
          publishWebProjects: false
          arguments: '--configuration $(buildConfiguration) -v n -o $(Build.ArtifactStagingDirectory)'
          zipAfterPublish: true

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Pipeline Artifact'
        inputs:
          #targetPath: $(Pipeline.Workspace)
          targetPath: $(Build.ArtifactStagingDirectory)
          artifact: 'drop'
          publishLocation: 'pipeline'

- stage: development
  displayName: 'Deploy to Development'
  dependsOn: build
  condition: succeeded()
  variables:
    - group: dev-var-grp
  jobs:
    - job: deployToDev
      displayName: 'Deploy to Azure App Service'
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)/drop'
      - script: pwd
        displayName: 'What directory are we in?'
        workingDirectory: '$(Pipeline.Workspace)'
      - script: ls -lR
        displayName: 'What files are in this folder?'
        workingDirectory: '$(Pipeline.Workspace)'
      - script: echo \"variable-test-key-1\" -> '$(variable-test-key-1)'
        displayName: 'Test Library Variable Group'
      # - task: AzureWebApp@1
      #   displayName: 'Deploy Azure Web App'
      #   inputs:
      #     azureSubscription: 'Dev Playground (17e2dde8-62cb-4aa3-b516-cb61a6056899)'
      #     appType: webAppLinux
      #     appName: as-mx-delete-me
      #     resourceGroupName: rg-mx-delete-me
      #     package: '$(Pipeline.Workspace)/drop/Build_$(Build.BuildId).zip'
      #     deploymentMethod: auto

# For more info: https://learn.microsoft.com/en-us/azure/devops/pipelines/tasks/reference/manual-validation-v0?view=azure-pipelines&tabs=yaml&viewFallbackFrom=azure-devops
- stage: approval
  displayName: 'Manual Approval'
  dependsOn: development
  condition: succeeded()
  pool: server
  jobs:
  - job: waitForApproval
    displayName: 'Waiting for approval'
    timeoutInMinutes: 4320 # 3 days
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task timeout in 1 day
        inputs:
          notifyUsers: |
            mhoque@inspirato.com
            mhoque@inspirato.io
          instructions: 'Please approve to deploy to Test (QA) Env'
          onTimeout: reject  

- stage: test
  displayName: 'Deploy to Test (QA)'
  dependsOn: approval
  condition: succeeded()
  variables:
    - group: dev-var-grp
  jobs:
    - job: deployToTest
      displayName: 'Deploy to Azure App Service (Test)'
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'drop'
          targetPath: '$(Pipeline.Workspace)/drop'
      - script: pwd
        displayName: 'What directory are we in?'
        workingDirectory: '$(Pipeline.Workspace)'
      - script: ls -lR
        displayName: 'What files are in this folder?'
        workingDirectory: '$(Pipeline.Workspace)'
      - script: echo \"variable-test-key-1\" -> '$(variable-test-key-1)'
        displayName: 'Test Library Variable Group'
          